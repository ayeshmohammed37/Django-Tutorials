Django Tutorial
  $ talking about django and what is used for
  in this tutorial we will build blog app using django that contains
    - Home page (blog posts update or delete them)
    - authentication system (log in - log out - register - forget password link)
    - profile (you can update profile info)
    - access admin page
  we will learn how to work with databases, create authentication system
  so let's get started

so we will start make our virtual environmint and install packgages that we need
  - first we will make our virenv we will call it a django_env and activate it
  - install django (-> pip install django)

let's start our project (and take overview of the project files)
  - create a project using django admin (django-admin startproject django_project)
  - go to the project dirctory and run this command (tree /f) to see the files tree 
    in your project
  - you will find files 
    - manage.py that allow us run command line commands (don't make any changes to this file)
    - we have dir django_project\ (same as the name of our project)
      - __init__.py (it's an empty file, this file just tells python that is a python package)
      - settings.py (where we'll change different settings and configurations)
      - urls.py (where we'll set up the mapping from certain URLs to where we sent the user)
      - wsgi.py (is how our python web application and web server communicate)
   
let's open up the default website in out browser using manage.py
  - run our server to access our site (python manage.py runserver)
  - we can access our site by going to this url  http://127.0.0.1:8000/
  - http://127.0.0.1:8000/  (127.0.0.1 = localhost = our local computer that we're currently on)
  - acces to the admin page (the urls file has an admin route)
  - path('admin/', admin.site.urls) when we go to admin it's going to admin.site.urls 
    and the logic with that location handle the route further, in the future
    we will add more routes, 
  - stop the server (ctrl + c)
  - when the server run on debug mode like this one it should automatically reload 
    any changes that we make to our code so sometimes when we have some troubles 
    we need to relod the server

______________________________________________________________________________________________________

add blog application to my django site
setting up url routes

  # create blog app (single project can contain multiple apps)
    - run command -> python manage.py startapp blog
  
  # working with views
    - import response
    - make home function wich will handle the traffic from the home page of
      our blog
        - write the logic for how we want to handle when a user
          goes to our blog homepage

  # create urls.py (to map the urls that we want to correspond to each view function)
    - connect the home view with a certain url 
      which is home path "" empty url
    - make sure to nameing the route with speicial names like for example ("appname-view")
    - add the app urls to the project url so when the user open blog route it will map map
      that to our blog urls which maps to our views
  
  # when i navigate into "/blog" it will open project urls.py in the main project
    so he will go the pattern that maches that, so it's already processed this blog
    part of the url so it's going rid of that and just send what's remaining to the
    blog urls then so it's just going to send empty string to blog.urls 
    in blog urls so search for pattern matches "" so it will be handled by function views.home
    so at home function will return http response with h1 tag says blog home


  # the smae for about page

  # if i want the root server localhost to be my home page
    just change the url at main project to be ""
    so when you at the localhost find the pattern "" then send "" to
    blog.url then at home function 

______________________________________________________________________________________________________

Working with templates
  